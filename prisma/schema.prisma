generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  phone         String?
  birthDate     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  prescriptions Prescription[]
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  role         UserRole       @default(USER)
  createdAt    DateTime       @default(now())
  Prescription Prescription[]
}

enum UserRole {
  ADMIN
  USER
  OPTOMETRIST
}

model Product {
  id          String          @id @default(uuid())
  name        String
  description String?
  price       Decimal
  stock       Int
  category    ProductCategory
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  orderLines OrderLine[]
}

enum ProductCategory {
  LENS
  FRAME
  CONTACT_LENS
  ACCESSORY
  SERVICE
}

model Order {
  id          String      @id @default(uuid())
  customerId  String
  totalAmount Decimal
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  customer   Customer    @relation(fields: [customerId], references: [id])
  invoices   Invoice[]
  orderLines OrderLine[]
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
  IN_PROGRESS
  DELIVERED
}

model OrderLine {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  price      Decimal
  totalPrice Decimal  @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Invoice {
  id        String        @id @default(uuid())
  orderId   String
  amount    Decimal
  dueDate   DateTime
  status    InvoiceStatus @default(UNPAID)
  createdAt DateTime      @default(now())

  order    Order     @relation(fields: [orderId], references: [id])
  payments Payment[]
}

enum InvoiceStatus {
  UNPAID
  PAID
  OVERDUE
}

model Payment {
  id        String        @id @default(uuid())
  invoiceId String
  amount    Decimal
  method    PaymentMethod
  createdAt DateTime      @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  INSTALLMENT
  PIX
  BOLETO
}

model Prescription {
  id                String   @id @default(uuid())
  customerId        String
  optometristId     String
  sphereOD          Decimal
  sphereOE          Decimal
  cylinderOD        Decimal
  cylinderOE        Decimal
  axisOD            Int
  axisOE            Int
  addOD             Decimal?
  addOE             Decimal?
  pupillaryDistance Int?
  createdAt         DateTime @default(now())

  customer    Customer @relation(fields: [customerId], references: [id])
  optometrist User     @relation(fields: [optometristId], references: [id])
}
